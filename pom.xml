<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>io.github.rahulsinghai</groupId>
	<artifactId>jmeter.backendlistener.kafka</artifactId>
	<version>1.0.2-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>${project.artifactId}</name>
	<description>JMeter Backend Listener Kafka is a JMeter plugin enabling you to send test results to a Kafka server. It is meant as an alternative live-monitoring tool to the built-in "InfluxDB" backend listener of JMeter.</description>
	<url>https://github.com/rahulsinghai/jmeter-backend-listener-kafka</url>
	<inceptionYear>2019</inceptionYear>

	<organization>
		<name>Rahul Singhai</name>
		<url>https://www.cse.iitb.ac.in/~rahuls_05</url>
	</organization>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<issueManagement>
		<system>GitHub</system>
		<url>https://github.com/rahulsinghai/jmeter-backend-listener-kafka/issues</url>
	</issueManagement>

	<developers>
		<developer>
			<id>rahulsinghai</id>
			<name>Rahul Singhai</name>
			<email>singrahu@gmail.com</email>
			<url>http://www.github.com/rahulsinghai</url>
			<timezone>Europe/London</timezone>
			<roles>
				<role>project owner</role>
				<role>developer</role>
			</roles>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:git://github.com/rahulsinghai/jmeter-backend-listener-kafka.git</connection>
		<developerConnection>scm:git:ssh://git@github.com/rahulsinghai/jmeter-backend-listener-kafka.git</developerConnection>
		<url>https://github.com/rahulsinghai/jmeter-backend-listener-kafka/tree/master</url>
	  <tag>HEAD</tag>
  </scm>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
    <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
		<maven.deploy.plugin.version>3.0.0-M1</maven.deploy.plugin.version>
		<maven.dependency.plugin.version>3.1.1</maven.dependency.plugin.version>
		<maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
		<maven.gpg.plugin.version>1.6</maven.gpg.plugin.version>
		<maven.git.code.format.plugin.version>1.24</maven.git.code.format.plugin.version>
		<maven.jacoco.plugin.version>0.8.4</maven.jacoco.plugin.version>
		<maven.javadoc.plugin.version>3.1.0</maven.javadoc.plugin.version>
		<maven.nexus.staging.plugin.version>1.6.8</maven.nexus.staging.plugin.version>
		<maven.release.plugin.version>2.5.3</maven.release.plugin.version>
		<maven.shade.plugin.version>3.2.1</maven.shade.plugin.version>
		<maven.source.plugin.version>3.1.0</maven.source.plugin.version>
		<maven.surefire.plugin.version>3.0.0-M3</maven.surefire.plugin.version>
		<guava.version>29.0-jre</guava.version>
		<gson.version>2.8.5</gson.version>
		<junit.version>5.4.2</junit.version>
		<org.apache.commons>3.8.1</org.apache.commons>
		<org.apache.jmeter.version>5.1.1</org.apache.jmeter.version>
		<org.apache.kafka>2.3.0</org.apache.kafka>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>${gson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>${guava.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.jmeter</groupId>
			<artifactId>ApacheJMeter_config</artifactId>
			<version>${org.apache.jmeter.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jmeter</groupId>
			<artifactId>ApacheJMeter_core</artifactId>
			<version>${org.apache.jmeter.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jmeter</groupId>
			<artifactId>ApacheJMeter_components</artifactId>
			<version>${org.apache.jmeter.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.jmeter</groupId>
			<artifactId>jorphan</artifactId>
			<version>${org.apache.jmeter.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${org.apache.commons}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.kafka</groupId>
			<artifactId>kafka-clients</artifactId>
			<version>${org.apache.kafka}</version>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jacoco</groupId>
			<artifactId>org.jacoco.agent</artifactId>
			<version>${maven.jacoco.plugin.version}</version>
			<scope>test</scope>
			<classifier>runtime</classifier>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>[2.9.9,)</version>
		</dependency>
	</dependencies>

	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<name>Sonatype Nexus Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<name>Nexus Release Repository</name>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
		<downloadUrl>https://oss.sonatype.org/content/groups/public/io/github/rahulsinghai/jmeter.backendlistener.kafka/</downloadUrl>
	</distributionManagement>

	<!--
	  The plugin configuration for maven-gpg-plugin is wrapped inside a profile.
	  Usually when you build SNAPSHOT version, you don't want to sign the artifacts, because it's
	  unnecessary and time-consuming.
	  Artifact signing is only necessary when it's time to release project.
	  So, we wrap the plugin configuration with a profile, which will only be activated on project
	  releasing.

	  This profile will be activated when the value of maven property performRelease is true.
	  When you use maven-release-plugin and run mvn release:perform, the property value will be
	  set to true.
  -->
	<profiles>
		<profile>
			<id>release-sign-artifacts</id>

			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>

			<build>
				<plugins>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>${maven.source.plugin.version}</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>${maven.javadoc.plugin.version}</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${maven.gpg.plugin.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven.release.plugin.version}</version>
				<configuration>
					<tagNameFormat>v@{project.version}</tagNameFormat>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<releaseProfiles>release-sign-artifacts</releaseProfiles>
					<goals>deploy</goals>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>${maven.nexus.staging.plugin.version}</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
					<!--<skipStagingRepositoryClose>true</skipStagingRepositoryClose>-->
				</configuration>
			</plugin>

			<!-- https://github.com/Cosium/maven-git-code-format -->
			<!-- Manual code formatting: mvn git-code-format:format-code -DglobPattern=**/* -->
			<!-- Manual code format validation: mvn git-code-format:validate-code-format -DglobPattern=**/* -->
			<plugin>
				<groupId>com.cosium.code</groupId>
				<artifactId>maven-git-code-format</artifactId>
				<version>${maven.git.code.format.plugin.version}</version>
				<executions>
          <!-- On commit, format the modified java files -->
					<execution>
            <id>install-formatter-hook</id>
            <goals>
              <goal>install-hooks</goal>
            </goals>
          </execution>
          <!-- On Maven verify phase, fail if any file (including unmodified) is badly formatted -->
          <execution>
            <id>validate-code-format</id>
            <goals>
              <goal>validate-code-format</goal>
            </goals>
          </execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>${maven.enforcer.plugin.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireMavenVersion>
									<version>[3.5.4,)</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- We use the Maven Surefire plugin to run the unit tests of our example application.	-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<parallel>methods</parallel>
					<threadCount>10</threadCount>
					<forkCount>2</forkCount>
					<reuseForks>true</reuseForks>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>${maven.dependency.plugin.version}</version>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<includeScope>compile</includeScope>
							<excludeScope>provided</excludeScope>
							<outputDirectory>${project.build.directory}/dependencies</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven.deploy.plugin.version}</version>
				<executions>
					<execution>
						<id>default-deploy</id>
						<phase>deploy</phase>
						<goals>
							<goal>deploy</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${maven.shade.plugin.version}</version>
				<executions>
					<!-- Run shade goal on package phase -->
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<excludes>
									<exclude>org.apache.jmeter:*</exclude>
									<exclude>commons-codec:*</exclude>
									<exclude>commons-logging:*</exclude>
									<exclude>org.apache.httpcomponents:*</exclude>
									<exclude>net.java.dev.jna:*</exclude>
								</excludes>
							</artifactSet>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${maven.jacoco.plugin.version}</version>
				<executions>
					<!--
            Prepares the property pointing to the JaCoCo runtime agent which
            is passed as VM argument when the Maven Surefire plugin is executed.
          -->
					<execution>
						<id>pre-unit-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>

					<!--
            Ensures that the code coverage report for unit tests is created after
            unit tests have been run.
          -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>

					<!-- Fails the build if code coverage falls below minimum value -->
					<execution>
						<id>jacoco-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>PACKAGE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.25</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
